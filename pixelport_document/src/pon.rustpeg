use pon::*;
use selector::*;
use entity_match::*;
use std::collections::HashMap;

#[pub]
body -> Pon
  = sep* n:pon sep* { n }

pon -> Pon
  = number_pon / string_pon / boolean_pon / object_pon / array_pon / nil_pon / call_pon / dep_propref_pon / propref_pon / selector_pon

call_pon -> Pon
  = function_name:identifier sep* arg:pon sep* {
    Pon::PonCall(Box::new(PonCall {
      function_name: function_name.to_string(),
      arg: arg
    }))
  }

dep_propref_pon -> Pon
  = "@" propref:propref {
    Pon::DependencyReference(propref, None)
  }

propref_pon -> Pon
  = propref:propref { Pon::Reference(propref) }

selector_pon -> Pon
  = "" selector:selector {
    Pon::Selector(selector)
  }

array_pon -> Pon
  = "[" sep* pons:(sep* v:pon sep* { v }) ** "," sep* ","? sep* "]" {
    Pon::Array(pons)
  }

object_pon -> Pon
  = "{" sep* kvs:(sep* k:identifier sep* ":" sep* v:pon sep* { (k, v) }) ** "," sep* ","? sep* "}" {
    let mut rv = HashMap::new();
    for &(ref k, ref v) in kvs.iter() {
      rv.insert(k.clone(), v.clone());
    };
    Pon::Object(rv)
  }

number_pon -> Pon
  = [-]?[0-9]+[.][0-9]+ { Pon::Number(match_str.parse().unwrap()) }
  / [-]?[0-9]+ { Pon::Number(match_str.parse().unwrap()) }

nil_pon -> Pon
  = "(" sep* ")" { Pon::Nil }

string_pon -> Pon
  = "'" s:char* "'" { Pon::String(s.iter().cloned().collect::<String>()) }

boolean_pon -> Pon
  = "true" { Pon::Boolean(true) }
  / "false" { Pon::Boolean(false) }



#[pub]
propref -> NamedPropRef
  = "" selector:selector sep* "." sep* property_key:identifier {
    NamedPropRef {
      selector: selector,
      property_key: property_key.to_string(),
    }
  }

selector_root -> Selector
  = "this" sep* { Selector::this() }
  / "root" sep* { Selector::root() }
  / "parent" sep* { Selector::this_parent() }
  / name:identifier sep* { Selector::root_search(name) }
  / id:entity_id sep* { Selector::id(id) }

selector_path -> SelectorPath
  = "/" sep* ematch:entity_match sep* { SelectorPath::Children(ematch) }
  / ":!" sep* ematch:entity_match sep* { SelectorPath::SearchInverse(ematch) }
  / ":" sep* ematch:entity_match sep* { SelectorPath::Search(ematch) }
  / "|parent|" sep* { SelectorPath::Parent }
  / "|prev-sibling|" sep* { SelectorPath::PrevSibling }
  / "|next-sibling|" sep* { SelectorPath::NextSibling }

#[pub]
selector -> Selector
  = selector:selector_root sep* path:(selector_path)* {
    let mut selector = selector;
    selector.path.extend(path);
    selector
  }

entity_match -> EntityMatch
  = sep* "*" sep* {
    EntityMatch::Any
  }
  / sep* type_name:identifier sep* {
    EntityMatch::TypeName(type_name)
  }
  / sep* "[" sep* a:entity_match sep* "&&" sep* b:entity_match sep* "]" sep* {
    EntityMatch::And(Box::new(a), Box::new(b))
  }
  / sep* "[" sep* a:entity_match sep* "||" sep* b:entity_match sep* "]" sep* {
    EntityMatch::Or(Box::new(a), Box::new(b))
  }
  / sep* "[" sep* "name" sep* "=" sep* name:identifier sep* "]" sep* {
    EntityMatch::Name(name)
  }
  / sep* "[" sep* prop:identifier sep* "!=" sep* val:pon sep* "]" sep* {
    EntityMatch::PropertyValueNotEquals { property: prop, value: Box::new(val) }
  }
  / sep* "[" sep* prop:identifier sep* "=" sep* val:pon sep* "]" sep* {
    EntityMatch::PropertyValueEquals { property: prop, value: Box::new(val) }
  }
  / sep* "[" sep* prop:identifier sep* "]" sep* {
    EntityMatch::PropertyExists(prop)
  }

identifier -> String
  = [a-zA-Z_][a-zA-Z_0-9]* { match_str.to_string() }

entity_id -> u64
  = "#" id:([0-9]+ { match_str.parse().unwrap() }) { id }

char -> char
  = [^\\'] { match_str.chars().next().unwrap() }
  / [\\]. { match_str.chars().nth(1).unwrap() }

comment = "//" [^\n]*
whitespace = [ \t\r\n]

sep
  = whitespace
  / comment
